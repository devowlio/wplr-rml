var SERVE_DIR, prompt = require('prompt'),
    _ = require("lodash"),
    exec = require('child_process').exec;

module.exports = function(grunt) {
    grunt.loadNpmTasks('grunt-cachebuster');
    grunt.loadNpmTasks('grunt-node-modules-cachebuster');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-clean');
    
    // Detect SERVE_DIR
    SERVE_DIR  = _.trimEnd(grunt.config.get('SERVE_DIR') || 'dist', '/');
    if (['.', './', '/'].indexOf(SERVE_DIR) > -1) {
        throw new Error('SERVE_DIR is not valid.');
    }
    
    /**
     * Tasks configuration.
     */
    grunt.config.merge({
        clean: {
            serve: SERVE_DIR + '/**/*',
            serveAfter: [SERVE_DIR + '/public/src', SERVE_DIR + '/composer.*']
        },
        copy: {
            serve: {
                expand: true,
                src: ['composer.json', 'index.php', 'inc/**/*', 'public/**/*', 'LICENSE', 'README.md', 'languages/**/*'],
                dest: SERVE_DIR
            }
        },
        cachebuster: {
            'public': {
                options: {
                    banner: '/* This file was automatically generated by the `grunt public-cachebuster` command (' + new Date().toString() + '). */',
                    format: 'php'
                },
                src: (function() {
                    var src = [];
                    ['dist', 'dev'].forEach(function(folder) {
                        src = src.concat(['public/' + folder + '/**/*.js', 'public/' + folder + '/**/*.css']);
                    });
                    return src;
                })(),
                dest: 'inc/others/cachebuster.php'
            }
        },
        node_modules_cachebuster: {
            'publiclib': {
                options: {
                    banner: '/* This file was automatically generated by the `grunt public-cachebuster` command (' + new Date().toString() + '). */',
                    format: 'php'
                },
                src: ['public/lib/*'],
                dest: 'inc/others/cachebuster-lib.php'
            }
        }
    });
    
    /**
     * Cachebuster task
     */
    grunt.registerTask('public-cachebuster', ['cachebuster:public', 'node_modules_cachebuster:publiclib']);
    
    /**
     * Copy npm libraries task.
     */
    grunt.registerTask('copy-npmLibs', ['clean:npmLibs', 'copy:npmLibs', 'node_modules_cachebuster:publiclib']);
    
    /**
     * Serve task.
     */
    grunt.registerTask('serveDo', function() {
        var done = this.async();
        grunt.log.writeln('Install no-dev composer dependencies... (SERVE_DIR=' + SERVE_DIR + ')');
        exec('composer install --no-dev --no-scripts --prefer-dist --working-dir ' + SERVE_DIR, function(error, stdout, stderr) { console.log(stdout); done(); });
    });
    grunt.registerTask('serve', ['clean:serve', 'copy:serve', 'serveDo', 'clean:serveAfter'].concat(grunt.config.get('SERVE_POST_TASKS') || []));
    
    /**
     * Serve rename readme task
     */
    grunt.registerTask('serveRenameReadme', function() {
        grunt.file.copy(SERVE_DIR + '/README.md', SERVE_DIR + '/README.txt');
        grunt.file.delete(SERVE_DIR + '/README.md');
    });

    /**
     * Generate task
     */
    grunt.registerTask('wordpress-reactjs-starter-makeyours', function() {
        // Check already generated
        if (grunt.file.exists('./build/.generated')) {
            throw new Error('You already have generated the boilerplate.');
        }
        
        // Start
        var done = this.async(),
            tmpl = grunt.file.read("./build/grunt-index-php.tmpl");
    
        prompt.start();
        prompt.get({
            properties: {
                pluginName: {
                    message: 'Step 1 / 14: Plugin name',
                    default: 'WP ReactJS Starter'
                },
                pluginURI: {
                    message: 'Step 2 / 14: Plugin URI',
                    default: 'https://github.com/matzeeeeeable/wp-reactjs-starter'
                },
                pluginDescription: {
                    message: 'Step 3 / 14: Plugin Description',
                    default: 'This WordPress plugin demonstrates how to setup a plugin that uses React and ES6 in a WordPress plugin.'
                },
                author: {
                    message: 'Step 4 / 14: Plugin author',
                    required: true
                },
                authorURI: {
                    message: 'Step 5 / 14: Plugin author URI'
                },
                version: {
                    message: 'Step 6 / 14: Plugin initial version',
                    default: '0.1.0'
                },
                textDomain: {
                    description: 'Step 7 / 14: Plugin slug for text domain, language files, ... (example: wp-reactjs-starter)',
                    pattern: /^[^ ]+$/,
                    message: 'The plugin slug may not contain whitespaces',
                    required: true
                },
                minPHP: {
                    message: 'Step 8 / 14: Minimum PHP version (minimum of 5.3 required for the boilerplate)',
                    default: '5.3.0'
                },
                minWP: {
                    message: 'Step 9 / 14: Minimum WordPress version (minimum of 4.4 required for the boilerplate)',
                    default: '4.4.0'
                },
                minRML: {
                    message: '... Interposed question: Minimum Real Media Library version',
                    default: '3.0.0'
                },
                namespace: {
                    description: 'Step 10 / 14: PHP file namespace prefix (example: MatthiasWeb\\WPRJSS)',
                    pattern: /^[^ ]+$/,
                    message: 'The namespace may not contain whitespaces',
                    required: true,
                    before: function(value) {
                        return _.trim(value, '\\').split('\\').join('\\\\');
                    }
                },
                optPrefix: {
                    description: 'Step 11 / 14: WordPress option names prefix (example: wprjss)',
                    pattern: /^[A-Za-z0-9_]+$/,
                    message: 'The option prefix must match the [A-Za-z0-9_] pattern',
                    before: function(value) {
                        return value.toLowerCase();
                    },
                    required: true
                },
                dbPrefix: {
                    description: 'Step 12 / 14: WordPress database tables prefix (example: wprjss)',
                    pattern: /^[A-Za-z0-9_]+$/,
                    message: 'The database table prefix must match the [A-Za-z0-9_] pattern',
                    before: function(value) {
                        return value.toLowerCase();
                    },
                    required: true
                },
                constantPrefix: {
                    description: 'Step 13 / 14: PHP constants prefix for the above options (example: WPRJSS)',
                    pattern: /^[A-Za-z0-9_]+$/,
                    message: 'The constant prefix must match the [A-Za-z0-9_] pattern',
                    before: function(value) {
                        return value.toUpperCase();
                    },
                    required: true
                },
                apiPrefix: {
                    description: 'Step 14 / 14: REST API namespace prefix (example: wprjss/v1)',
                    pattern: /^[^ ]+$/,
                    message: 'The namespace may not contain whitespaces',
                    required: true
                }
            }
        }, function (e, result) {
            // We have all the informations, let's parse the index.php file
            var indexPHP = tmpl;
            _.each(result, function(value, key) {
                indexPHP = indexPHP.replace(new RegExp('\\$\\{' + key + '\\}', 'g'), value);
            });
            
            // Create index.php file
            grunt.log.writeln('Creating index.php file...');
            grunt.file.write('./index.php', indexPHP);
            grunt.file.write('./build/.generated', JSON.stringify(result));

            // Read all available constants
            grunt.log.writeln('Fetching all available constant names...');
            var m, regex = /define\(\'([^\']+)/g, constants = [];
            while ((m = regex.exec(indexPHP)) !== null) {
                if (m.index === regex.lastIndex) {
                    regex.lastIndex++;
                }
                
                m.forEach((match, groupIndex) => {
        			if (groupIndex === 1) {
        				constants.push(match);
        			}
                });
            }
            grunt.log.writeln('Found the following constants: ' + constants.join(', '));
            
            // PHP replacements (inc)
            var fileContent, file, files = grunt.file.expand({
                cwd: './inc'
            }, "**/*"), parseOldConstant = function(constant) {
                return 'WPRJSS' + constant.slice(result.constantPrefix.length);
            }, functions = ['wprjss_skip_php_admin_notice', 'wprjss_skip_wp_admin_notice', 'wprjss_skip_rest_admin_notice', 'wprjss_skip_rml_admin_notice'];
            _.each(files, function(_file) {
                file = './inc/' + _file;
                if (grunt.file.isFile(file)) {
                    grunt.log.writeln('Create constants, namespaces and procedural functions in [' + file + '] ...');
                    fileContent = grunt.file.read(file);
                    
                    // Replacing the constants in /inc files
                    _.each(constants, function(constant) {
                        fileContent = fileContent.replace(new RegExp(parseOldConstant(constant), 'g'), constant);
                    });
                    
                    // Replacing the namespaces in /inc files
                    fileContent = fileContent.replace(new RegExp('MatthiasWeb\\\\WPRJSS', 'g'), result.namespace.replace('\\\\', '\\'));
                    
                    // Apply for procedural functions
                    _.each(functions, function(fnName) {
                        fileContent = fileContent.replace(new RegExp(fnName, 'g'), fnName.replace('wprjss', result.optPrefix));
                    });
                    
                    // File specific replaces
                    switch (_file) {
                        case 'general/Assets.class.php':
                            fileContent = fileContent.replace(new RegExp('wp-reactjs-starter', 'g'), result.textDomain);
                            fileContent = fileContent.replace('wprjssOpts', result.optPrefix + 'Opts');
                            break;
                        case 'rest/Service.class.php':
                            fileContent = fileContent.replace('wprjss/v1', result.apiPrefix);
                        case 'menu/Page.class.php':
                            fileContent = fileContent.replace(new RegExp('wp-react-component-library', 'g'), result.optPrefix + '-wp-react-component-library');
                        default:
                            break;
                    }
                    
                    grunt.file.write(file, fileContent);
                }
            });
            
            // JS replacements
            grunt.log.writeln('Generate JavaScript files...');
            files = grunt.file.expand({
                cwd: './public/src'
            }, "**/*");
            _.each(files, function(_file) {
                file = './public/src/' + _file;
                if (grunt.file.isFile(file)) {
                    fileContent = grunt.file.read(file);
                    
                    // Replace localized object
                    fileContent = fileContent.replace(new RegExp('window.wprjssOpts', 'g'), 'window.' + result.optPrefix + 'Opts');
                    
                    // File specific replaces
                    switch (_file) {
                        case 'admin.js':
                            fileContent = fileContent.replace('wp-react-component-library', result.optPrefix + '-wp-react-component-library');
                        default:
                            break;
                    }
                    
                    grunt.file.write(file, fileContent);
                }
            });
            
            // Apply for language files
            grunt.log.writeln('Create language file...');
            var potFile = './languages/wp-reactjs-starter.pot', potContent = grunt.file.read(potFile);
            grunt.file.delete(potFile);
            grunt.file.write('./languages/' + result.textDomain + '.pot', potContent.replace('WP ReactJS Starter', result.pluginName));
            
            // Success
            grunt.log.ok('All files successfully created. Please read on the Documentation on https://github.com/matzeeeeeable/wp-reactjs-starter for more information. Happy coding and make something awesome. :-)');
            grunt.log.ok('Oh forgot... The package.json and composer.json files have to be adjusted to your needs.');
            done();
        });
    });
};